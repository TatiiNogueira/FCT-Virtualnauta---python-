Para escrever um comentário tenho de escrever # no local onde quero que o comentário comece e ele comenta desde o # até ao final da linha
ou escrever ''' onde quero que o comentário comece e depois escrevo ''' onde quero que o comentário termine

As variaveis e nomes de funções devem ser escritas com letra minúscula e separadas por _
Constantes são variáveis que devem ser escritam em maiúsculo e cujo valor nunca é alterado ao longo do programa

O Python é sensivel a letras maiúsculas e minúsculas, ou seja a variavel sapo e a variavel Sapo são duas variáveis diferentes

------------------------------------------------------------------------------------------------------------------
Class -> Escrever o nome da class com letra maiuscula no inicio
         Quando o nome é constituido por mais de uma palavra, escrever a inicial da palavra com letra maiuscula
------------------------------------------------------------------------------------------------------------------
Operadores Aritméticos
10/2 = 5.0
Divisão inteira (//) --> Divisão mas retonar o resultado em inteiro, neste caso o resultado será 5
EX:
         resultado = 10 // 2

Módulo (%) --> Retornar o resto do resultado da divisão, neste caso será retornado apenas 0, pois é o valor depois da virgula, o resto
EX:
         modulo = 10 % 2

------------------------------------------------------------------------------------------------------------------
Ciclos For
Quando estamos a criar um ciclo for mas queremos que o código a serguir seja ignorado escrevemos continue, ou seja quando o código chegar ao continue
irá ignorar o código que viria a seguir e passa para o próximo ciclo
EX:
         for i in range(10):
             if i % 2 == 0:
                 continue
             print(i)

------------------------------------------------------------------------------------------------------------------
Listas
frutas = ["Morango", "Banana", "Melancia"]

Adicionar um elemento ao final da lista lista
frutas.append("Pera")

Adicionar um elemento numa posição expecifica da lista, neste caso posicão 1 que irá corresponder ao elemento 2, pois a contagem começa no zero
frutas.insert(1, "Uva")

Remover um elemento da lista
frutas.remove("Banana")

Remover um elemento da lista pela posição do elemento
fruta_removida = frutas.pop(2)

Colar a lista por ordem ascendente, da primeira letra do alfabeto para a última letra do alfabeto
frutas.sort()

Reverter a ordem da lista, a ordem inicial seria [M,B,U], passa a ser [M,B,U]
frutas.reverse()

------------------------------------------------------------------------------------------------------------------
Dicionários
Cada elemnto do dicionário, é composto por uma chave e um valor
pessoa = {"Nome": "Maria", "Idade": 22, "Pais": "Portugal"}

Obter todas as Chaves do Dicionário
pessoa.keys()
Resultado: dict_keys(['Nome', 'Idade', 'Pais'])

Obter todos os Valores do Dicionário
pessoa.values()
Resultado: dict_values(['Maria', 22, 'Portugal'])

Adiconar um nome elemento ao Dicionário, é necessário dizer a chave e o valor
pessoa.update({"Profissao": "Programador"})

------------------------------------------------------------------------------------------------------------------
Conjuntos(set)
Para criar um conjunto, utilize chaves ou a função set():
EXs:
         frutas = {"maçã", "banana", "laranja"}
         numeros = set([1, 2, 3, 4, 5])

Criação e operações básicas
conjunto1 = {1, 2, 3}
conjunto2 = {3, 4, 5}

Juntar os dois conjuntos
uniao = conjunto1 | conjunto2
Resultado: {1, 2, 3, 4, 5}

Valores que se encontram presentes em ambos os conjuntos
intersecao = conjunto1 & conjunto2
Resutado: {3}

Valores que estão no conjunto 1 mas não no conjunto 2, existem duas maneiras de fazer
diferenca = conjunto1 - conjunto2
diferenca2 = conjunto1.difference(conjunto2)
Resultado: {1,2}

Valores que só se encotram num dos conjuntos, se estiver em ambos como o caso do 3 não irá ser mostrado, existem duas maneiras de fazer
diferenca_simetrica = conjunto1 ^ conjunto2
diferenca_simetrica = conjunto1.symmetric_difference(conjunto2)
Resultado: {1, 2, 4, 5}

Métodos de conjuntos
frutas = {"Arroz", "Farinha", "Sopa"}

Adiconar um elemento ao conjunto
frutas.add("Esparguete")

Remover um elemento do conjunto, mas se o mesmo não existir gera erro
frutas.remove("Farinha")

Remover um elemento do conjunto, mas se o mesmo não existir não faz nada
frutas.discard("Carne")

Limpar o conjunto, como o conjunto irá ficar vazio, será retornado set()
frutas.clear()

------------------------------------------------------------------------------------------------------------------
Funções
Documentação de Funções
Args são os Argumentos
Returns valores retornados
Os Args e Returns podem ter várias variáveis e só devem ser documentados caso existam, se a função não tiver nenhuma variável,
não deverá ter a parte de Args e o mesmo se aplica aos Returns
Dentro da função escrevemos o comentário a seguir
"""
Escrevemos o que a função faz

Args:
         variavel (type): O que representa a variável
...

Returns:
         variavel (type): O que retorna a variável
         OU
         type: O que retorna
"""

Funções Lambda -> São funções que não tem nome
Indicamos uma variavel em seguida fazemos a indicação do lambda e x: significa o que a função irá retornar
Neste cas a função irá retornar x(Que é o parametro da função) + 3
EX:
   sumar = lambda x: x + 3
         print(sumar(5))

------------------------------------------------------------------------------------------------------------------
Exceções Personalisadas
Tratar de um erro personalisado
EX:
         def funcao(condicao):
             # Código que pode gerar uma exceção personalizada
             if condicao:
                 raise Exception("Descrição do erro")
         
         #Local onde chamamos a função e definimos que se der um erro tratado irá mostrar/imprimir o mesmo
         try:
             funcao(True)
         except Exception as e:
             print(f"Erro: {str(e)}")
